syntax = "proto3";
package influxdata.iox.ingester.v1;
option go_package = "github.com/influxdata/iox/ingester/v1";

import "google/protobuf/timestamp.proto";

// IOx-specific metadata that will be serialized into the file-level key-value Parquet metadata
// under a single key.
message IoxMetadata {
  // Removed as the Parquet metadata itself contains the row count & min/max
  // timestamps, and specifying them here creates a dependency that prevents
  // streaming serialisation (needing to know the number rows before you can
  // serialize your parquet file with this metadata structure within it)
  reserved 10, 11, 14;
  reserved "row_count", "time_of_first_write", "time_of_last_write";

  // Object store ID. Used in the parquet filename. 16 bytes in big-endian order.
  bytes object_store_id = 1;

  // Timestamp when this file was created.
  google.protobuf.Timestamp creation_timestamp = 2;

  // Unique namespace ID.
  int64 namespace_id = 3;

  // Unique name of the namespace.
  string namespace_name = 4;

  // Unique sequencer ID.
  int64 sequencer_id = 5;

  // Unique table ID.
  int64 table_id = 6;

  // Table that holds this parquet file.
  string table_name = 7;

  // Unique partition ID.
  int64 partition_id = 8;

  // Partition key of the partition that holds this parquet file.
  string partition_key = 9;

  // The minimum sequence number from a sequencer in this parquet file.
  int64 min_sequence_number = 12;

  // The maximum sequence number from a sequencer in this parquet file.
  int64 max_sequence_number = 13;

  // The sort key of this chunk
  SortKey sort_key = 15;

  // the compaction level of the file
  int32 compaction_level = 16;
}

// Sort key of a chunk.
message SortKey {
  // A sort expression
  message Expr {
    // The name of the column
    string column = 1;

    /// Whether the data is sorted in descending order
    bool descending = 2;

    /// Whether the data is sorted with nulls first
    bool nulls_first = 3;
  }

  repeated Expr expressions = 1;
}
